"use strict";(self.webpackChunkdoc_hub=self.webpackChunkdoc_hub||[]).push([[9776],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(96540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}},89601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Backend/Java/Java\u8fed\u4ee3\u5668","title":"Java \u8fed\u4ee3\u5668","description":"Java \u8fed\u4ee3\u5668","source":"@site/docs/Backend/Java/Java\u8fed\u4ee3\u5668.md","sourceDirName":"Backend/Java","slug":"/backend/java/iterator","permalink":"/docs/backend/java/iterator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Backend/Java/Java\u8fed\u4ee3\u5668.md","tags":[{"inline":true,"label":"Java","permalink":"/docs/tags/java"}],"version":"current","frontMatter":{"title":"Java \u8fed\u4ee3\u5668","description":"Java \u8fed\u4ee3\u5668","slug":"/backend/java/iterator","hide_table_of_contents":false,"keywords":["Java"],"tags":["Java"],"date":"2017-08-01T00:00:00.000Z","categories":["Java"]},"sidebar":"backendSideBar","previous":{"title":"Java \u7ebf\u7a0b\u6c60","permalink":"/docs/backend/java/thread-pool"},"next":{"title":"\u6211\u662f\u4e00\u4e2a\u7ebf\u7a0b","permalink":"/docs/backend/java/thread"}}');var i=n(74848),o=n(28453);const a={title:"Java \u8fed\u4ee3\u5668",description:"Java \u8fed\u4ee3\u5668",slug:"/backend/java/iterator",hide_table_of_contents:!1,keywords:["Java"],tags:["Java"],date:new Date("2017-08-01T00:00:00.000Z"),categories:["Java"]},s=void 0,l={},c=[{value:"Iterator",id:"iterator",level:2},{value:"Iterable",id:"iterable",level:2},{value:"Iterator \u4e0e\u6cdb\u578b\u642d\u914d",id:"iterator-\u4e0e\u6cdb\u578b\u642d\u914d",level:2},{value:"foreach \u548c Iterator \u7684\u5173\u7cfb",id:"foreach-\u548c-iterator-\u7684\u5173\u7cfb",level:2},{value:"\u4f7f\u7528 for \u5faa\u73af\u4e0e\u4f7f\u7528\u8fed\u4ee3\u5668 iterator \u7684\u5bf9\u6bd4",id:"\u4f7f\u7528-for-\u5faa\u73af\u4e0e\u4f7f\u7528\u8fed\u4ee3\u5668-iterator-\u7684\u5bf9\u6bd4",level:2},{value:"\u6548\u7387\u4e0a",id:"\u6548\u7387\u4e0a",level:3},{value:"\u6570\u636e\u7ed3\u6784\u89d2\u5ea6\u5206\u6790",id:"\u6570\u636e\u7ed3\u6784\u89d2\u5ea6\u5206\u6790",level:3},{value:"fast-fail",id:"fast-fail",level:2}];function d(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u6a21\u5f0f\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\u5bf9\u4e8e\u5e8f\u5217\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u7684\u904d\u5386\u884c\u4e3a\u4e0e\u88ab\u904d\u5386\u7684\u5bf9\u8c61\u5206\u79bb\uff0c\u65e0\u9700\u5173\u5fc3\u8be5\u5e8f\u5217\u7684\u5e95\u5c42\u7ed3\u6784\uff0c\u53ea\u8981\u62ff\u5230\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u5c31\u53ef\u4ee5\u904d\u5386\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5185\u90e8;"}),"\n",(0,i.jsx)(t.h2,{id:"iterator",children:"Iterator"}),"\n",(0,i.jsxs)(t.p,{children:["Java \u63d0\u4f9b\u4e00\u4e2a\u4e13\u95e8\u7684\u8fed\u4ee3\u5668",(0,i.jsx)(t.code,{children:"<<interface>>Iterator"}),'\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u67d0\u4e2a\u5e8f\u5217\u5b9e\u73b0\u8be5 interface\uff0c\u6765\u63d0\u4f9b\u6807\u51c6\u7684 Java \u8fed\u4ee3\u5668\u3002Iterator \u63a5\u53e3\u5b9e\u73b0\u540e\u7684\u529f\u80fd\u662f"\u4f7f\u7528\u201d\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1b']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package java.util;\n\nimport java.util.function.Consumer;\n\npublic interface Iterator<E> {\n    /**\n     * Returns {@code true} if the iteration has more elements.\n     * (In other words\uff0c returns {@code true} if {@link #next} would\n     * return an element rather than throwing an exception.)\n     *\n     * @return {@code true} if the iteration has more elements\n     **/\n    boolean hasNext();\n\n    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration\n     * @throws NoSuchElementException if the iteration has no more elements\n     **/\n    E next();\n\n    /**\n     * Removes from the underlying collection the last element returned\n     * by this iterator (optional operation).  This method can be called\n     * only once per call to {@link #next}.  The behavior of an iterator\n     * is unspecified if the underlying collection is modified while the\n     * iteration is in progress in any way other than by calling this\n     * method.\n     *\n     * @implSpec\n     * The default implementation throws an instance of\n     * {@link UnsupportedOperationException} and performs no other action.\n     *\n     * @throws UnsupportedOperationException if the {@code remove}\n     *         operation is not supported by this iterator\n     *\n     * @throws IllegalStateException if the {@code next} method has not\n     *         yet been called\uff0c or the {@code remove} method has already\n     *         been called after the last call to the {@code next}\n     *         method\n     **/\n    default void remove() {\n        throw new UnsupportedOperationException("remove");\n    }\n\n    /**\n     * Performs the given action for each remaining element until all elements\n     * have been processed or the action throws an exception.  Actions are\n     * performed in the order of iteration\uff0c if that order is specified.\n     * Exceptions thrown by the action are relayed to the caller.\n     *\n     * @implSpec\n     * <p>The default implementation behaves as if:\n     * <pre>{@code\n     *     while (hasNext())\n     *         action.accept(next());\n     * }</pre>\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     * @since 1.8\n     **/\n    default void forEachRemaining(Consumer<? super E> action) {\n        Objects.requireNonNull(action);\n        while (hasNext())\n            action.accept(next());\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"iterable",children:"Iterable"}),"\n",(0,i.jsxs)(t.p,{children:['Java \u4e2d\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a Iterable \u63a5\u53e3\uff0cIterable \u63a5\u53e3\u5b9e\u73b0\u540e\u7684\u529f\u80fd\u662f"\u8fd4\u56de\u201d\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u5e38\u7528\n\u7684\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u5b50\u63a5\u53e3\u6709\uff1a ',(0,i.jsx)(t.code,{children:"Collection<E>"}),"\uff0c ",(0,i.jsx)(t.code,{children:"Deque<E>"}),"\uff0c",(0,i.jsx)(t.code,{children:"List<E>"}),"\uff0c ",(0,i.jsx)(t.code,{children:"Queue<E>"}),"\uff0c ",(0,i.jsx)(t.code,{children:"Set<E>"})," \u7b49\u3002\n\u8be5\u63a5\u53e3\u7684 iterator()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6807\u51c6\u7684 Iterator \u5b9e\u73b0\uff0c\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u5141\u8bb8\u5bf9\u8c61\u6210\u4e3a foreach \u8bed\u53e5\u7684\u76ee\u6807\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 foreach \u8bed\u6cd5\u904d\u5386\u4f60\u7684\u5e95\u5c42\u5e8f\u5217\u3002\nIterable \u63a5\u53e3\u5305\u542b\u4e00\u4e2a\u80fd\u591f\u4ea7\u751f Iterator \u7684 iterator()\u65b9\u6cd5\uff0c\u5e76\u4e14 Iterable \u63a5\u53e3\u88ab foreach \u7528\u6765\u5728\u5e8f\u5217\u4e2d\u79fb\u52a8\u3002\u56e0\u6b64\u5982\u679c\u521b\u5efa\u4e86\u4efb\u4f55\u5b9e\u73b0 Iterable \u63a5\u53e3\u7684\u7c7b\uff0c\u90fd\u53ef\u4ee5\u5c06\u5b83\u7528\u4e8e foreach \u8bed\u53e5\u4e2d\u3002"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package java.lang;\n\nimport java.util.Iterator;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.function.Consumer;\n\n/*\n * Implementing this interface allows an object to be the target of\n * the "for-each loop" statement. See\n */\npublic interface Iterable<T> {\n    /**\n     * Returns an iterator over elements of type {@code T}.\n     * @return an Iterator.\n     **/\n    Iterator<T> iterator();\n\n    /**\n     * Performs the given action for each element of the {@code Iterable}\n     * until all elements have been processed or the action throws an\n     * exception.  Unless otherwise specified by the implementing class\uff0c\n     * actions are performed in the order of iteration (if an iteration order\n     * is specified).  Exceptions thrown by the action are relayed to the\n     * caller.\n     **/\n    default void foreach(Consumer<? super T> action) {\n        Objects.requireNonNull(action);\n        for (T t : this) {\n            action.accept(t);\n        }\n    }\n\n    /**\n     * Creates a {@link Spliterator} over the elements described by this\n     * {@code Iterable}.\n     *\n     * @implSpec\n     * The default implementation creates an\n     * <em><a href="Spliterator.html#binding">early-binding</a></em>\n     * spliterator from the iterable\'s {@code Iterator}.  The spliterator\n     * inherits the <em>fail-fast</em> properties of the iterable\'s iterator.\n     *\n     * @implNote\n     * The default implementation should usually be overridden.  The\n     * spliterator returned by the default implementation has poor splitting\n     * capabilities\uff0c is unsized\uff0c and does not report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     **/\n    default Spliterator<T> spliterator() {\n        return Spliterators.spliteratorUnknownSize(iterator()\uff0c 0);\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Iterator \u793a\u4f8b:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import java.util.*;\n\npublic class IteratorTest {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        Map<Integer, String> map = new HashMap<>();\n\n        for (int i = 0; i < 10; ++i) {\n            list.add("list" + i);\n            map.put(i, "map" + i);\n        }\n\n        Iterator iter = list.iterator();\n        while (iter.hasNext()) {\n            String element = (String) iter.next();\n            System.out.println(element);\n        }\n\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println("key: " + entry.getKey() + "\uff0c value: " + entry.getValue());\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"\u63a5\u53e3 Iterator \u5728\u4e0d\u540c\u7684\u5b50\u63a5\u53e3\u4e2d\u4f1a\u6839\u636e\u60c5\u51b5\u8fdb\u884c\u529f\u80fd\u7684\u6269\u5c55\uff0c\u4f8b\u5982\u9488\u5bf9 List \u7684\u8fed\u4ee3\u5668 ListIterator\uff0c\u8be5\u8fed\u4ee3\u5668\u53ea\u80fd\u7528\u4e8e\u5404\u79cd List \u7c7b\u7684\u8bbf\u95ee\u3002ListIterator \u53ef\u4ee5\u53cc\u5411\u79fb\u52a8\uff0c\u6dfb\u52a0\u4e86 previous()\u7b49\u65b9\u6cd5\u3002"})}),"\n",(0,i.jsx)(t.h2,{id:"iterator-\u4e0e\u6cdb\u578b\u642d\u914d",children:"Iterator \u4e0e\u6cdb\u578b\u642d\u914d"}),"\n",(0,i.jsx)(t.p,{children:"Iterator \u5bf9\u96c6\u5408\u7c7b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u90fd\u53ef\u4ee5\u8fd4\u56de\u8fd9\u6837\u4e00\u4e2a Iterator \u5bf9\u8c61\uff0c\u9002\u7528\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7c7b\u3002\n\u56e0\u4e3a\u96c6\u5408\u7c7b(List \u548c Set \u7b49)\u53ef\u4ee5\u88c5\u5165\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u4ece\u96c6\u5408\u4e2d\u53d6\u51fa\u65f6\u90fd\u662f Object \u7c7b\u578b\uff0c\u7528\u65f6\u90fd\u9700\u8981\u8fdb\u884c\u5f3a\u5236\u8f6c\u5316\uff0c\u7528\u4e0a\u6cdb\u578b\uff0c\u63d0\u524d\u544a\u8bc9\u96c6\u5408\u786e\u5b9a\u8981\u88c5\u5165\u96c6\u5408\u7684\u7c7b\u578b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u800c\u4e0d\u7528\u663e\u793a\u7c7b\u578b\u8f6c\u6362\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"foreach-\u548c-iterator-\u7684\u5173\u7cfb",children:"foreach \u548c Iterator \u7684\u5173\u7cfb"}),"\n",(0,i.jsx)(t.p,{children:"foreach \u662f jdk5.0 \u65b0\u589e\u52a0\u7684\u4e00\u4e2a\u5faa\u73af\u7ed3\u6784\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u800c\u4e0d\u7528\u8003\u8651\u96c6\u5408\u5b9a\u4e0b\u6807\u3002\u5176\u5b9e foreach \u5faa\u73af\u5185\u90e8\u4e5f\u662f\u4f9d\u8d56\u4e8e Iterator \u8fed\u4ee3\u5668\uff0c\u53ea\u4e0d\u8fc7 Java \u63d0\u4f9b\u7684\u8bed\u6cd5\u7cd6\uff0cJava \u7f16\u8bd1\u5668\u4f1a\u5c06\u5176\u8f6c\u5316\u4e3a Iterator \u8fed\u4ee3\u5668\u65b9\u5f0f\u904d\u5386\u3002\u5bf9\u4ee5\u4e0b foreach \u5faa\u73af\u8fdb\u884c\u53cd\u7f16\u8bd1\uff1a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"for(Integer i : list) {\n  System.out.println(i);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"\u53cd\u7f16\u8bd1\u540e\uff1a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"for(Iterator iterator = list.iterator(); iterator.hasNext();) {\n  Integer i = (Integer)iterator.next();\n  System.out.println(i);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"\u4f7f\u7528 foreach \u5faa\u73af\u8bed\u53e5\u7684\u4f18\u52bf\u5728\u4e8e\u66f4\u52a0\u7b80\u6d01\uff0c\u66f4\u4e0d\u5bb9\u6613\u51fa\u9519\uff0c\u4e0d\u5fc5\u5173\u5fc3\u4e0b\u6807\u7684\u8d77\u59cb\u503c\u548c\u7ec8\u6b62\u503c\u3002\nforeach \u4e0d\u662f\u5173\u952e\u5b57\uff0c\u5173\u952e\u5b57\u8fd8\u662f for\uff0c\u8bed\u53e5\u662f\u7531 iterator \u5b9e\u73b0\u7684\uff0c\u4ed6\u4eec\u6700\u5927\u7684\u4e0d\u540c\u4e4b\u5904\u5c31\u5728\u4e8e remove()\u65b9\u6cd5\u4e0a\u3002\n\u4e00\u822c\u8c03\u7528\u5220\u9664\u548c\u6dfb\u52a0\u65b9\u6cd5\u90fd\u662f\u5177\u4f53\u96c6\u5408\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a\nList list = new ArrayList();\nlist.add(...);\nlist.remove(...);\n\u4f46\u662f\uff0c\u5982\u679c\u5728\u5faa\u73af\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528\u96c6\u5408\u7684 remove()\u65b9\u6cd5\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5faa\u73af\u51fa\u9519\uff0c\u56e0\u4e3a\u5faa\u73af\u8fc7\u7a0b list.size()\u7684\u5927\u5c0f\u53d8\u5316\u4e86\uff0c\u5c31\u5bfc\u81f4\u4e86\u9519\u8bef\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u60f3\u5728\u5faa\u73af\u8bed\u53e5\u4e2d\u5220\u9664\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u5c31\u8981\u7528\u8fed\u4ee3\u5668 iterator \u7684 remove()\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u7684 remove()\u65b9\u6cd5\u4e0d\u4ec5\u4f1a\u5220\u9664\u5143\u7d20\uff0c\u8fd8\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u6807\u5fd7\uff0c\u7528\u6765\u8bb0\u5f55\u76ee\u524d\u662f\u4e0d\u662f\u53ef\u5220\u9664\u72b6\u6001\uff0c\u4f8b\u5982\uff0c\u4f60\u4e0d\u80fd\u8fde\u7eed\u4e24\u6b21\u8c03\u7528\u5b83\u7684 remove()\u65b9\u6cd5\uff0c\u8c03\u7528\u4e4b\u524d\u81f3\u5c11\u6709\u4e00\u6b21 next()\u65b9\u6cd5\u7684\u8c03\u7528\u3002\nforeach \u5c31\u662f\u4e3a\u4e86\u8ba9\u7528 iterator \u5faa\u73af\u8bbf\u95ee\u7684\u5f62\u5f0f\u7b80\u5355\uff0c\u5199\u8d77\u6765\u66f4\u65b9\u4fbf\u3002\u5f53\u7136\u529f\u80fd\u4e0d\u592a\u5168\uff0c\u6240\u4ee5\u4f46\u5982\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u8fd8\u662f\u8981\u7528\u5b83\u539f\u6765\u7684\u5f62\u5f0f\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"\u4f7f\u7528-for-\u5faa\u73af\u4e0e\u4f7f\u7528\u8fed\u4ee3\u5668-iterator-\u7684\u5bf9\u6bd4",children:"\u4f7f\u7528 for \u5faa\u73af\u4e0e\u4f7f\u7528\u8fed\u4ee3\u5668 iterator \u7684\u5bf9\u6bd4"}),"\n",(0,i.jsx)(t.h3,{id:"\u6548\u7387\u4e0a",children:"\u6548\u7387\u4e0a"}),"\n",(0,i.jsx)(t.p,{children:"\u91c7\u7528 ArrayList \u5bf9\u968f\u673a\u8bbf\u95ee\u6bd4\u8f83\u5feb\uff0c\u800c for \u5faa\u73af\u4e2d\u7684 get()\u65b9\u6cd5\uff0c\u91c7\u7528\u7684\u5373\u662f\u968f\u673a\u8bbf\u95ee\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u5728 ArrayList \u91cc\uff0cfor \u5faa\u73af\u8f83\u5feb\uff1b\n\u91c7\u7528 LinkedList \u5219\u662f\u987a\u5e8f\u8bbf\u95ee\u6bd4\u8f83\u5feb\uff0citerator \u4e2d\u7684 next()\u65b9\u6cd5\uff0c\u91c7\u7528\u7684\u5373\u662f\u987a\u5e8f\u8bbf\u95ee\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u5728 LinkedList \u91cc\uff0c\u4f7f\u7528 iterator \u8f83\u5feb\uff1b"}),"\n",(0,i.jsx)(t.h3,{id:"\u6570\u636e\u7ed3\u6784\u89d2\u5ea6\u5206\u6790",children:"\u6570\u636e\u7ed3\u6784\u89d2\u5ea6\u5206\u6790"}),"\n",(0,i.jsx)(t.p,{children:"for \u5faa\u73af\u9002\u5408\u8bbf\u95ee\u987a\u5e8f\u7ed3\u6784\uff0c\u53ef\u4ee5\u6839\u636e\u4e0b\u6807\u5feb\u901f\u83b7\u53d6\u6307\u5b9a\u5143\u7d20\uff1b\nIterator \u9002\u5408\u8bbf\u95ee\u94fe\u5f0f\u7ed3\u6784\uff0c\u56e0\u4e3a\u8fed\u4ee3\u5668\u662f\u901a\u8fc7 next()\u548c pre()\u6765\u5b9a\u4f4d\u7684\uff0c\u53ef\u4ee5\u8bbf\u95ee\u6ca1\u6709\u987a\u5e8f\u7684\u96c6\u5408\uff1b\n\u4f7f\u7528 Iterator \u7684\u597d\u5904\u5728\u4e8e\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u65b9\u5f0f\u53bb\u904d\u5386\u96c6\u5408\u4e2d\u5143\u7d20\uff0c\u800c\u4e0d\u7528\u8003\u8651\u96c6\u5408\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\uff08\u53ea\u8981\u5b83\u5b9e\u73b0\u4e86 java.lang.Iterable \u63a5\u53e3\uff09\uff0c\u5982\u679c\u4f7f\u7528 Iterator \u6765\u904d\u5386\u96c6\u5408\u4e2d\u5143\u7d20\uff0c\u4e00\u65e6\u4e0d\u518d\u4f7f\u7528 List \u8f6c\u800c\u4f7f\u7528 Set \u6765\u7ec4\u7ec7\u6570\u636e\uff0c\u90a3\u904d\u5386\u5143\u7d20\u7684\u4ee3\u7801\u4e0d\u7528\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u5982\u679c\u4f7f\u7528 for \u6765\u904d\u5386\uff0c\u90a3\u6240\u6709\u904d\u5386\u6b64\u96c6\u5408\u7684\u7b97\u6cd5\u90fd\u5f97\u505a\u76f8\u5e94\u8c03\u6574\uff0c\u56e0\u4e3a List \u6709\u5e8f\uff0cSet \u65e0\u5e8f\uff0c\u7ed3\u6784\u4e0d\u540c\uff0c\u4ed6\u4eec\u7684\u8bbf\u95ee\u7b97\u6cd5\u4e5f\u4e0d\u4e00\u6837\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"fast-fail",children:"fast-fail"}),"\n",(0,i.jsxs)(t.p,{children:["fail-fast \u673a\u5236\u662f java \u96c6\u5408(Collection)\u4e2d\u7684\u4e00\u79cd\u9519\u8bef\u673a\u5236\u3002\u5f53\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5185\u5bb9\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u4ea7\u751f fail-fast \u4e8b\u4ef6\uff0c\u629b\u51fa",(0,i.jsx)(t.strong,{children:"ConcurrentModificationException"}),"\u5f02\u5e38\uff1b"]}),"\n",(0,i.jsx)(t.p,{children:"\u539f\u7406\uff1aArrayList \u7ee7\u627f\u81ea AbstractList \u7c7b\uff0cAbstractList \u5185\u90e8\u6709\u4e00\u4e2a\u5b57\u6bb5 modCount\uff0c\u4ee3\u8868\u4fee\u6539\u7684\u6b21\u6570\uff1b"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"/*\n* The number of times this list has been <i>structurally modified</i>.\n* Structural modifications are those that change the size of the\n* list, or otherwise perturb it in such a fashion that iterations in\n* progress may yield incorrect results.\n*\n* <p>This field is used by the iterator and list iterator implementation\n* returned by the {@code iterator} and {@code listIterator} methods.\n* If the value of this field changes unexpectedly, the iterator (or list\n* iterator) will throw a {@code ConcurrentModificationException} in\n* response to the {@code next}, {@code remove}, {@code previous},\n* {@code set} or {@code add} operations.  This provides\n* <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n* the face of concurrent modification during iteration.\n*\n* <p><b>Use of this field by subclasses is optional.</b> If a subclass\n* wishes to provide fail-fast iterators (and list iterators), then it\n* merely has to increment this field in its {@code add(int, E)} and\n* {@code remove(int)} methods (and any other methods that it overrides\n* that result in structural modifications to the list).  A single call to\n* {@code add(int, E)} or {@code remove(int)} must add no more than\n* one to this field, or the iterators (and list iterators) will throw\n* bogus {@code ConcurrentModificationExceptions}.  If an implementation\n* does not wish to provide fail-fast iterators, this field may be\n* ignored.\n*/\nprotected transient int modCount = 0;\n"})}),"\n",(0,i.jsx)(t.p,{children:"\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f modCount \u662f\u8fd9\u4e2a list \u88ab\u7ed3\u6784\u6027\u4fee\u6539\u7684\u6b21\u6570\u3002\u7ed3\u6784\u6027\u4fee\u6539\u662f\u6307\uff1a\u6539\u53d8 list \u7684 size \u5927\u5c0f\uff0c\u6216\u8005\uff0c\u4ee5\u5176\u4ed6\u65b9\u5f0f\u6539\u53d8\u4ed6\u5bfc\u81f4\u6b63\u5728\u8fdb\u884c\u8fed\u4ee3\u65f6\u51fa\u73b0\u9519\u8bef\u7684\u7ed3\u679c\u3002\u8fd9\u4e2a\u5b57\u6bb5\u7528\u4e8e\u8fed\u4ee3\u5668\u548c\u5217\u8868\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0\u7c7b\u4e2d\uff0c\u7531\u8fed\u4ee3\u5668\u548c\u5217\u8868\u8fed\u4ee3\u5668\u65b9\u6cd5\u8fd4\u56de\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u88ab\u610f\u5916\u6539\u53d8\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u5c06\u4f1a\u629b\u51fa ConcurrentModificationException \u7684\u5f02\u5e38\u6765\u54cd\u5e94\uff1anext\uff0cremove\uff0cprevious\uff0cset\uff0cadd \u8fd9\u4e9b\u64cd\u4f5c\u3002\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u63d0\u4f9b\u4e86 fail-fast \u884c\u4e3a\u800c\u4e0d\u662f\u4e0d\u786e\u5b9a\u884c\u4e3a\u6765\u5904\u7406\u5e76\u53d1\u4fee\u6539\u3002\u5b50\u7c7b\u4f7f\u7528\u8fd9\u4e2a\u5b57\u6bb5\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u5b50\u7c7b\u5e0c\u671b\u63d0\u4f9b fail-fast \u8fed\u4ee3\u5668\uff0c\u5b83\u4ec5\u4ec5\u9700\u8981\u5728 add(int, E)\uff0cremove(int)\u65b9\u6cd5\uff08\u6216\u8005\u5b83\u91cd\u5199\u7684\u5176\u4ed6\u4efb\u4f55\u4f1a\u7ed3\u6784\u6027\u4fee\u6539\u8fd9\u4e2a\u5217\u8868\u7684\u65b9\u6cd5\uff09\u4e2d\u6dfb\u52a0\u8fd9\u4e2a\u5b57\u6bb5\u3002\u8c03\u7528 add(int,E)\u6216\u8005 remove(int)\u65b9\u6cd5\u65f6\u5fc5\u987b\u4e14\u4ec5\u4ec5\u7ed9\u8fd9\u4e2a\u5b57\u6bb5\u52a0 1\uff0c\u5426\u5219\u8fed\u4ee3\u5668\u4f1a\u629b\u51fa ConcurrentModificationExceptions \u9519\u8bef\u3002\u5982\u679c\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u4e0d\u5e0c\u671b\u63d0\u4f9b fail-fast \u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u5b57\u6bb5\u3002"}),"\n",(0,i.jsxs)(t.p,{children:["\u5f53\u4f7f\u7528 ArrayList.iterator()\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u65f6\uff0c\u8fed\u4ee3\u5668\u5bf9\u8c61\u6709\u4e00\u4e2a\u5c5e\u6027 expectedModCount\uff0c\u5b83\u88ab\u8d4b\u503c\u4e3a\u8be5\u65b9\u6cd5\u8c03\u7528\u65f6 modCount \u7684\u503c\u3002",(0,i.jsx)(t.strong,{children:"\u8fd9\u4e2a\u503c\u662f modCount \u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u7684\u5feb\u7167\u503c\uff0cexpectedModCount \u503c\u5728 iterator \u5bf9\u8c61\u5185\u90e8\u4e0d\u4f1a\u518d\u53d1\u9001\u53d8\u5316\uff01"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"private class Itr implements Iterator<E> {\n   /**\n    * Index of element to be returned by subsequent call to next.\n    */\n   int cursor = 0;\n\n   /**\n    * Index of element returned by most recent call to next or\n    * previous.  Reset to -1 if this element is deleted by a call\n    * to remove.\n    */\n   int lastRet = -1;\n\n   /**\n    * The modCount value that the iterator believes that the backing\n    * List should have.  If this expectation is violated, the iterator\n    * has detected concurrent modification.\n    */\n   int expectedModCount = modCount;\n\n   public boolean hasNext() {\n       return cursor != size();\n   }\n\n   public E next() {\n       checkForComodification();\n       try {\n           int i = cursor;\n           E next = get(i);\n           lastRet = i;\n           cursor = i + 1;\n           return next;\n       } catch (IndexOutOfBoundsException e) {\n           checkForComodification();\n           throw new NoSuchElementException();\n       }\n   }\n\n   public void remove() {\n       if (lastRet < 0)\n           throw new IllegalStateException();\n       checkForComodification();\n\n       try {\n           AbstractList.this.remove(lastRet);\n           if (lastRet < cursor)\n               cursor--;\n           lastRet = -1;\n           expectedModCount = modCount;\n       } catch (IndexOutOfBoundsException e) {\n           throw new ConcurrentModificationException();\n       }\n   }\n\n   /**\n    * \u68c0\u67e5modCount\u548cexpectedModCount\u662f\u5426\u76f8\u7b49\uff0c\u5373modCount\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\n    * \u5982\u679cmodCount\u76f8\u6bd4\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u65f6\u5019\u53d1\u751f\u4e86\u53d8\u5316\u5c31\u629b\u51faConcurrentModificationException\n    */\n   final void checkForComodification() {\n       if (modCount != expectedModCount)\n           throw new ConcurrentModificationException();\n   }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["\u83b7\u53d6\u5230\u8fed\u4ee3\u5668\u4e4b\u540e\uff0c\u5982\u679c\u4f7f\u7528 ArrayList \u7684 add\u3001remove \u7b49\u65b9\u6cd5\uff0c\u4f1a\u4f7f\u5f97 modCount \u7684\u503c\u81ea\u589e\uff08",(0,i.jsx)(t.strong,{children:"\u53d1\u751f\u4e86\u53d8\u5316"}),"\uff09\uff0c\u800c iterator \u5185\u90e8\u7684 expectedModCount \u503c\u5374\u8fd8\u662f\u4e4b\u524d\u7684\u5feb\u7167\u503c\u3002\u800c iterator \u5728\u8c03\u7528 next \u65b9\u6cd5\u65f6\uff0c",(0,i.jsx)(t.strong,{children:"\u7b2c\u4e00\u6b65\u5c31\u662f\u68c0\u67e5 modCount \u503c\u548c\u8fed\u4ee3\u5668\u5185\u90e8\u7684 expectedModCount \u503c\u662f\u5426\u76f8\u7b49"}),"\uff01\u8fd9\u4e2a\u65f6\u5019\u786e\u5b9a\u503c\u662f\u4e0d\u7b49\u7684\uff0c\u6240\u4ee5\u5728\u8c03\u7528 next \u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5c31\u629b\u51fa\u4e86 ConcurrentModificationException \u5f02\u5e38\u3002"]}),"\n",(0,i.jsx)(t.p,{children:"\u83b7\u53d6\u5230\u8fed\u4ee3\u5668\u4e4b\u540e\uff0c\u5982\u679c\u4f7f\u7528 ArrayList \u7684 remove \u65b9\u6cd5\u65f6\uff0c\u4f1a\u5bf9 expectedModCount \u91cd\u65b0\u8d4b\u503c\u4e3a modCount\uff0c\u4fdd\u8bc1\u4e86\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u6b63\u786e\u3002"}),"\n",(0,i.jsx)(t.p,{children:"fail-fast \u673a\u5236\uff0c\u662f\u4e00\u79cd\u9519\u8bef\u68c0\u6d4b\u673a\u5236\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4f7f\u7528 fail-fast \u673a\u5236\u7684\u96c6\u5408\uff0c\u5efa\u8bae\u4f7f\u7528\u201cjava.util.concurrent \u5305\u4e0b\u7684\u7c7b\u201d\u53bb\u53d6\u4ee3\u201cjava.util \u5305\u4e0b\u7684\u7c7b\u201d\uff0c\u5982 CopyOnWriteArrayList"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);