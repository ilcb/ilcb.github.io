"use strict";(self.webpackChunkdoc_hub=self.webpackChunkdoc_hub||[]).push([[1148],{28453:(n,e,t)=>{t.d(e,{R:()=>p,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function p(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:p(n.components),r.createElement(i.Provider,{value:e},n.children)}},76422:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Wiki/DesignPattern/\u884c\u4e3a\u578b/\u89e3\u91ca\u5668(Interpreter)","title":"\u89e3\u91ca\u5668\u6a21\u5f0f","description":"\u89e3\u91ca\u5668\u6a21\u5f0f","source":"@site/docs/Wiki/DesignPattern/\u884c\u4e3a\u578b/\u89e3\u91ca\u5668(Interpreter).md","sourceDirName":"Wiki/DesignPattern/\u884c\u4e3a\u578b","slug":"/backend/design-pattern/action/interpreter","permalink":"/en/docs/backend/design-pattern/action/interpreter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Wiki/DesignPattern/\u884c\u4e3a\u578b/\u89e3\u91ca\u5668(Interpreter).md","tags":[{"inline":true,"label":"\u8bbe\u8ba1\u6a21\u5f0f","permalink":"/en/docs/tags/\u8bbe\u8ba1\u6a21\u5f0f"},{"inline":true,"label":"\u7ed3\u6784\u578b","permalink":"/en/docs/tags/\u7ed3\u6784\u578b"}],"version":"current","frontMatter":{"title":"\u89e3\u91ca\u5668\u6a21\u5f0f","description":"\u89e3\u91ca\u5668\u6a21\u5f0f","slug":"/backend/design-pattern/action/interpreter","hide_table_of_contents":false,"keywords":["\u8bbe\u8ba1\u6a21\u5f0f","\u7ed3\u6784\u578b"],"tags":["\u8bbe\u8ba1\u6a21\u5f0f","\u7ed3\u6784\u578b"],"date":"2017-08-01T00:00:00.000Z","categories":["\u8bbe\u8ba1\u6a21\u5f0f"]},"sidebar":"designPatternSidebar","previous":{"title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f","permalink":"/en/docs/backend/design-pattern/action/template"},"next":{"title":"\u72b6\u6001\u6a21\u5f0f","permalink":"/en/docs/backend/design-pattern/action/state"}}');var s=t(74848),i=t(28453);const p={title:"\u89e3\u91ca\u5668\u6a21\u5f0f",description:"\u89e3\u91ca\u5668\u6a21\u5f0f",slug:"/backend/design-pattern/action/interpreter",hide_table_of_contents:!1,keywords:["\u8bbe\u8ba1\u6a21\u5f0f","\u7ed3\u6784\u578b"],tags:["\u8bbe\u8ba1\u6a21\u5f0f","\u7ed3\u6784\u578b"],date:new Date("2017-08-01T00:00:00.000Z"),categories:["\u8bbe\u8ba1\u6a21\u5f0f"]},o=void 0,a={},l=[{value:"\u5b9a\u4e49",id:"\u5b9a\u4e49",level:2},{value:"\u7ed3\u6784",id:"\u7ed3\u6784",level:2},{value:"\u62bd\u8c61\u89e3\u91ca\u5668\uff08AbstractExpression\uff09",id:"\u62bd\u8c61\u89e3\u91ca\u5668abstractexpression",level:3},{value:"\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff08TerminalExpression\uff09",id:"\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0fterminalexpression",level:3},{value:"\u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff08NonterminalExpression\uff09",id:"\u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0fnonterminalexpression",level:3},{value:"\u4e0a\u4e0b\u6587\uff08Context\uff09",id:"\u4e0a\u4e0b\u6587context",level:3},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:2},{value:"\u539f\u578b",id:"\u539f\u578b",level:3},{value:"\u8fd0\u7b97\u7b26",id:"\u8fd0\u7b97\u7b26",level:3}];function c(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"\u5b9a\u4e49",children:"\u5b9a\u4e49"}),"\n",(0,s.jsx)(e.p,{children:"\u89e3\u91ca\u5668\u6a21\u5f0f\uff08Interpreter Pattern\uff09\u63d0\u4f9b\u4e86\u8bc4\u4f30\u8bed\u8a00\u7684\u8bed\u6cd5\u6216\u8868\u8fbe\u5f0f\u7684\u65b9\u5f0f\uff0c\u5b83\u5c5e\u4e8e\u884c\u4e3a\u578b\u6a21\u5f0f\u3002\u8fd9\u79cd\u6a21\u5f0f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8868\u8fbe\u5f0f\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u89e3\u91ca\u4e00\u4e2a\u7279\u5b9a\u7684\u4e0a\u4e0b\u6587\u3002\u8fd9\u79cd\u6a21\u5f0f\u88ab\u7528\u5728 SQL \u89e3\u6790\u3001\u7b26\u53f7\u5904\u7406\u5f15\u64ce\u7b49\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u7ed3\u6784",children:"\u7ed3\u6784"}),"\n",(0,s.jsx)(e.h3,{id:"\u62bd\u8c61\u89e3\u91ca\u5668abstractexpression",children:"\u62bd\u8c61\u89e3\u91ca\u5668\uff08AbstractExpression\uff09"}),"\n",(0,s.jsx)(e.p,{children:"\u58f0\u660e\u4e00\u4e2a\u62bd\u8c61\u7684\u89e3\u91ca\u64cd\u4f5c\uff0c\u8be5\u63a5\u53e3\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811\u4e2d\u6240\u6709\u7684\u8282\u70b9\u5171\u4eab\uff0c\u5177\u4f53\u7684\u89e3\u91ca\u4efb\u52a1\u7531\u5404\u4e2a\u5b9e\u73b0\u7c7b\u5b8c\u6210\u3002"}),"\n",(0,s.jsx)(e.h3,{id:"\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0fterminalexpression",children:"\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff08TerminalExpression\uff09"}),"\n",(0,s.jsx)(e.p,{children:"\u5b9e\u73b0\u4e0e\u6587\u6cd5\u4e2d\u7684\u5143\u7d20\u76f8\u5173\u8054\u7684\u89e3\u91ca\u64cd\u4f5c\uff0c\u901a\u5e38\u4e00\u4e2a\u89e3\u91ca\u5668\u6a21\u5f0f\u4e2d\u53ea\u6709\u4e00\u4e2a\u7ec8\u7ed3\u8868\u8fbe\u5f0f\uff0c\u4f46\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u5bf9\u5e94\u4e0d\u540c\u7684\u7ec8\u7ed3\u7b26\u3002"}),"\n",(0,s.jsx)(e.h3,{id:"\u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0fnonterminalexpression",children:"\u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff08NonterminalExpression\uff09"}),"\n",(0,s.jsx)(e.p,{children:"\u6587\u6cd5\u4e2d\u7684\u6bcf\u6761\u89c4\u5219\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u975e\u7ec8\u7ed3\u8868\u8fbe\u5f0f\uff0c\u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\u6839\u636e\u903b\u8f91\u7684\u590d\u6742\u7a0b\u5ea6\u800c\u589e\u52a0\uff0c\u539f\u5219\u4e0a\u6bcf\u4e2a\u6587\u6cd5\u89c4\u5219\u90fd\u5bf9\u5e94\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f"}),"\n",(0,s.jsx)(e.h3,{id:"\u4e0a\u4e0b\u6587context",children:"\u4e0a\u4e0b\u6587\uff08Context\uff09"}),"\n",(0,s.jsx)(e.p,{children:"\u4e0a\u4e0b\u6587\u73af\u5883\u7c7b,\u5305\u542b\u89e3\u91ca\u5668\u4e4b\u5916\u7684\u5168\u5c40\u4fe1\u606f"}),"\n",(0,s.jsx)(e.h2,{id:"\u5b9e\u73b0",children:"\u5b9e\u73b0"}),"\n",(0,s.jsx)(e.h3,{id:"\u539f\u578b",children:"\u539f\u578b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'/**\n * \u62bd\u8c61\u8868\u8fbe\u5f0f\uff0c\u58f0\u660e\u4e00\u4e2a\u62bd\u8c61\u7684\u89e3\u91ca\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811\u4e2d\u6240\u6709\u8282\u70b9\u5171\u4eab\n */\npublic abstract class AbstractExpression {\n    public abstract void interpret(Context context);\n}\n\n/**\n * \u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff0c\u5b9e\u73b0\u4e0e\u6587\u6cd5\u4e2d\u7684\u7ec8\u7ed3\u7b26\u76f8\u5173\u7684\u89e3\u91ca\u64cd\u4f5c\n */\npublic class TerminalExpression extends AbstractExpression {\n    @Override\n    public void interpret(Context context) {\n        System.out.println("\u7ec8\u7ed3\u8868\u8fbe\u5f0f");\n    }\n}\n\n/**\n * \u975e\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff0c\u4e3a\u6587\u6cd5\u4e2d\u975e\u7ec8\u7ed3\u7b26\u5b9e\u73b0\u89e3\u91ca\u64cd\u4f5c\n */\npublic class NonterminalExpression extends AbstractExpression {\n    @Override\n    public void interpret(Context context) {\n        System.out.println("\u975e\u7ec8\u7ed3\u89e3\u91ca\u5668");\n    }\n}\n\n/**\n * \u5305\u542b\u89e3\u91ca\u5668\u4e4b\u5916\u7684\u4e00\u4e9b\u5168\u5c40\u4fe1\u606f\n */\npublic class Context {\n    private String input;\n    private String output;\n\n    public String getInput() {\n        return input;\n    }\n\n    public void setInput(String input) {\n        this.input = input;\n    }\n\n    public String getOutput() {\n        return output;\n    }\n\n    public void setOutput(String output) {\n        this.output = output;\n    }\n}\n\npublic class InterperterTest {\n    @Test\n    public void interpret() {\n        Context context = new Context();\n        List<AbstractExpression> list = new ArrayList<>();\n        list.add(new TerminalExpression());\n        list.add(new NonterminalExpression());\n        list.add(new TerminalExpression());\n        list.add(new TerminalExpression());\n\n        for (AbstractExpression expression : list) {\n            expression.interpret(context);\n        }\n    }\n}\n\n##\u7ed3\u679c\n\u7ec8\u7ed3\u8868\u8fbe\u5f0f\n\u975e\u7ec8\u7ed3\u89e3\u91ca\u5668\n\u7ec8\u7ed3\u8868\u8fbe\u5f0f\n\u7ec8\u7ed3\u8868\u8fbe\u5f0f\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u8fd0\u7b97\u7b26",children:"\u8fd0\u7b97\u7b26"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"/**\n * \u62bd\u8c61\u89e3\u91ca\u5668\n */\npublic abstract class Expression {\n    abstract int interpret();\n}\n\n/**\n * \u64cd\u4f5c\u6570\u8868\u8fbe\u5f0f\n */\npublic class NumExpression extends Expression {\n    private Integer num;\n\n    public NumExpression(Integer num) {\n        this.num = num;\n    }\n\n    @Override\n    public int interpret() {\n        return num;\n    }\n}\n\n/**\n * \u8fd0\u7b97\u8868\u8fbe\u5f0f\n */\npublic abstract class OperationExpression extends Expression {\n    protected Expression leftExpression;\n    protected Expression rightExpression;\n\n    public OperationExpression(Expression leftExpression, Expression rightExpression) {\n        this.leftExpression = leftExpression;\n        this.rightExpression = rightExpression;\n    }\n}\n\n/**\n * \u52a0\u6cd5\u8fd0\u7b97\n */\npublic class AddExpression extends OperationExpression {\n    public AddExpression(Expression leftExpression, Expression rightExpression) {\n        super(leftExpression, rightExpression);\n    }\n\n    @Override\n    int interpret() {\n        return leftExpression.interpret() + rightExpression.interpret();\n    }\n}\n\n/**\n * \u51cf\u6cd5\u8fd0\u7b97\n */\npublic class SubExpression extends OperationExpression {\n    public SubExpression(Expression leftExpression, Expression rightExpression) {\n        super(leftExpression, rightExpression);\n    }\n\n    @Override\n    int interpret() {\n        return leftExpression.interpret() - rightExpression.interpret();\n    }\n}\n\n/**\n * \u4e58\u6cd5\u8fd0\u7b97\n */\npublic class MultipleExpression extends OperationExpression {\n    public MultipleExpression(Expression leftExpression, Expression rightExpression) {\n        super(leftExpression, rightExpression);\n    }\n\n    @Override\n    int interpret() {\n        return leftExpression.interpret() * rightExpression.interpret();\n    }\n}\n\n/**\n * \u9664\u6cd5\u8fd0\u7b97\n */\npublic class DivideExpression extends OperationExpression {\n    public DivideExpression(Expression leftExpression, Expression rightExpression) {\n        super(leftExpression, rightExpression);\n    }\n\n    @Override\n    int interpret() {\n        return leftExpression.interpret() / rightExpression.interpret();\n    }\n}\n\n/**\n * \u8ba1\u7b97\u5668\n */\npublic class Calculator {\n    // \u4e2d\u7f00\u8868\u8fbe\u5f0f\n    private String expressions;\n    // \u64cd\u4f5c\u7b26\u6808\n    private LinkedList<Character> operStack = new LinkedList<>();\n    // \u540e\u7f00\u8868\u8fbe\u5f0f\u8ba1\u7b97\u6570\u636e\u6808\n    private Stack<Expression> numStack = new Stack<>();\n\n    public String getExpressions() {\n        return expressions;\n    }\n\n    public void setExpressions(String expressions) {\n        this.expressions = expressions;\n    }\n\n    /**\n     * \u4e2d\u7f00\u8f6c\u540e\u7f00\n     * 1.\u9047\u5230\u64cd\u4f5c\u6570\uff1a\u6dfb\u52a0\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\u4e2d\u6216\u76f4\u63a5\u8f93\u51fa\n     * 2.\u6808\u7a7a\u65f6\uff1a\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u76f4\u63a5\u5165\u6808\n     * 3.\u9047\u5230\u5de6\u62ec\u53f7\uff1a\u5c06\u5176\u5165\u6808\n     * 4.\u9047\u5230\u53f3\u62ec\u53f7\uff1a\u6267\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u7684\u662f\u5de6\u62ec\u53f7(\u6ce8\u610f\uff1a\u5de6\u62ec\u53f7\u4e0d\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f)\n     * 5.\u9047\u5230\u5176\u4ed6\u8fd0\u7b97\u7b26\uff1a\u5f39\u51fa\u6240\u6709\u4f18\u5148\u7ea7\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5\u8fd0\u7b97\u7b26\u7684\u6808\u9876\u5143\u7d20\uff0c\u7136\u540e\u5c06\u8be5\u8fd0\u7b97\u7b26\u5165\u6808\n     * 6.\u5c06\u6808\u4e2d\u5269\u4f59\u5185\u5bb9\u4f9d\u6b21\u5f39\u51fa\u540e\u7f00\u8868\u8fbe\u5f0f\n     */\n    public String transferPostfix() {\n        String result = \"\";\n        for (char ele : expressions.toCharArray()) {\n            // \u6570\u5b57\u76f4\u63a5\u5165\u6808\n            if (Character.isDigit(ele)) {\n                result += ele;\n                continue;\n            }\n\n            if (ele == '(') {\n                // 3.\u9047\u5230\u5de6\u62ec\u53f7\uff1a\u5c06\u5176\u5165\u6808\n                operStack.push(ele);\n            } else if (ele == ')') {\n                // 4.\u9047\u5230\u53f3\u62ec\u53f7\uff1a\u6267\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u7684\u662f\u5de6\u62ec\u53f7(\u6ce8\u610f\uff1a\u5de6\u62ec\u53f7\u4e0d\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f)\n                while (!operStack.isEmpty() && operStack.peek() != '(') {\n                    result += operStack.pop();\n                }\n\n                // \u5f39\u51fa\u5de6\u62ec\u53f7\n                operStack.pop();\n            } else {\n                //5.\u9047\u5230\u5176\u4ed6\u8fd0\u7b97\u7b26\uff1a\u5f39\u51fa\u6240\u6709\u4f18\u5148\u7ea7\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5\u8fd0\u7b97\u7b26\u7684\u6808\u9876\u5143\u7d20\uff0c\u7136\u540e\u5c06\u8be5\u8fd0\u7b97\u7b26\u5165\u6808\n                while (!operStack.isEmpty() && priority(operStack.peek()) >= priority(ele) && operStack.peek() != '(') {\n                    result += operStack.pop();\n                }\n                operStack.push(ele);\n            }\n        }\n\n        //6.\u5c06\u6808\u4e2d\u5269\u4f59\u5185\u5bb9\u4f9d\u6b21\u5f39\u51fa\u540e\u7f00\u8868\u8fbe\u5f0f\n        while (!operStack.isEmpty()) {\n            result += operStack.poll();\n        }\n        return result.toString();\n    }\n\n    private int priority(char oper) {\n        switch (oper) {\n            case '+':\n            case '-':\n                return 1;\n            case '*':\n            case '/':\n                return 2;\n            case '(':\n            case ')':\n                return 3;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * \u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\n     * \u4ece\u5de6\u5230\u53f3\u626b\u63cf\u540e\u7f00\u8868\u8fbe\u5f0f\n     * 1.\u82e5\u662f\u64cd\u4f5c\u6570\uff0c\u5c31\u538b\u6808\uff0c\n     * 2.\u82e5\u662f\u64cd\u4f5c\u7b26\uff0c\u5c31\u8fde\u7eed\u5f39\u51fa\u4e24\u4e2a\u64cd\u4f5c\u6570\u8ba1\u7b97\uff0c\u8ba1\u7b97\u7ed3\u679c\u538b\u6808\n     * 3.\u6808\u9876\u7684\u503c\u5373\u4e3a\u6240\u9700\u7ed3\u679c\n     * \u6ce8\uff1a\u5148\u5f39\u51fa\u7684\u662f\u7b2c\u4e00\u64cd\u4f5c\u6570\uff0c\u540e\u5f39\u51fa\u7684\u662f\u7b2c\u4e8c\u64cd\u4f5c\u6570\n     */\n    public int calculate() {\n        Expression leftExpression = null;\n        Expression rightExpression = null;\n        char[] array = transferPostfix().toCharArray();\n        for (int i = 0, length = array.length; i < length; ++i) {\n            switch (array[i]) {\n                case '+':\n                    rightExpression = numStack.pop();\n                    leftExpression = numStack.pop();\n                    numStack.push(new AddExpression(leftExpression, rightExpression));\n                    break;\n                case '-':\n                    rightExpression = numStack.pop();\n                    leftExpression = numStack.pop();\n                    numStack.push(new SubExpression(leftExpression, rightExpression));\n                    break;\n                case '*':\n                    rightExpression = numStack.pop();\n                    leftExpression = numStack.pop();\n                    numStack.push(new MultipleExpression(leftExpression, rightExpression));\n                    break;\n                case '/':\n                    rightExpression = numStack.pop();\n                    leftExpression = numStack.pop();\n                    numStack.push(new DivideExpression(leftExpression, rightExpression));\n                    break;\n                default:\n                    numStack.push(new NumExpression(Integer.valueOf(\"\" + array[i])));\n            }\n        }\n        return numStack.pop().interpret();\n    }\n}\n\npublic class CalculterTest {\n    @Test\n    public void test() {\n        String str = \"3+(2-5)*6/3\"; // \u540e\u7f00\u8868\u8fbe\u5f0f\u4e3a\uff1a 325-6*3/+\n        Calculator calculator = new Calculator();\n        calculator.setExpressions(str);\n        int result = calculator.calculate();\n        System.out.println(result);\n\n        str = \"5+2*(3*(3-1*2+1))\"; // 523312*-1+**+\n        calculator.setExpressions(str);\n        result = calculator.calculate();\n        System.out.println(result);\n    }\n}\n\n##\u7ed3\u679c\n\u540e\u7f00\uff1a 325-6*3/+\n-3\n\u540e\u7f00\uff1a 523312*-1+**+\n17\n\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);